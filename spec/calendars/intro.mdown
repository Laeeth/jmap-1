# Introduction

JMAP ([@!RFC8620] – JSON Meta Application Protocol) is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification defines a data model for synchronising calendar data between a client and a server using JMAP. The data model is designed to allow a server to provide consistent access to the same data via CalDAV [@?RFC4791] as well as JMAP, however the functionality offered over the two protocols may differ. Unlike CalDAV, this specification does not define access to tasks or journal entries (VTODO or VJOURNAL iCalendar components in CalDAV).

## Data Model Overview

A CalendarUser represents an individual, team or resource (e.g. a room or projector). A CalendarUser has a 1:1 correspondence with an Account (see [@!RFC8620], Section 1.6.2) that supports the `urn:ietf:params:jmap:calendars` capability. A singleton CalendarUser object within such an Account provides further information about the CalendarUser being represented, such as a name, description and default time zone.

Each such Account also contains one or more Calendar objects, which is a named collection of CalendarEvents belonging to the CalendarUser. Sharing permissions are managed per calendar. For example, an individual may have separate calendars for personal and work activities, with both contributing to their free-busy availability, but only the work calendar shared in its entirety with colleagues. Calendars can also provide defaults, such as alerts and colour to apply to events in the calendar. Clients commonly let users toggle visibility of events belonging to a particular calendar on/off.

Calendar owners may set up sharing with other specific calendar users. TODO.

A CalendarEvent is a representation of an event or recurring series of events in JSEvent [@!draft-ietf-calext-jscalendar-17] format. Simple clients may ask the server to expand recurrences for them within a specific time period, and optionally convert times into UTC so they do not have to handle time zone conversion. More full-featured clients will want to access the full event information and handle recurrence expansion and time zone conversion locally.

## Accounts, Push, and the Session Object

The JMAP session object (see [@!RFC8620], Section 2) typically includes an object in the `accounts` property for every account that the user has access to. Calendaring systems often share data between a (potentially very) large number of calendarusers, most of which the user does not care about day-to-day but may occasionally need to query when scheduling events.

Users may subscribe to any calendar to which they have access (see Section TODO). This indicates the user wants this calendar to appear in their regular list of calendars, although visibility in the current view is also determined by an isVisible property (see Section TODO).

Only accounts where the user is subscribed to at least one calendar will appear in the session object. StateChange events for changes to data in calendars MUST only be received for events in calendars the user has subscribed to.

The server may reject the user's attempt to subscribe to some calendars, e.g. those representing resources.

A user may query the set of CalendarUsers they have access to with CalendarUser/query (see Section XXX).

### UIDs and CalendarEvent Ids

Each CalendarEvent has a `uid` property, which is a globally unique identifier that identifies the same event in different Accounts, or different instances of the same recurring event within an Account.

An Account MUST NOT contain more than one CalendarEvent with the same uid unless all of the CalendarEvent objects have distinct, non-null values for their `recurrenceId` property. (This situation occurs if the calendar user is added to one or more specific instances of a recurring event without being invited to the whole series.)

Each CalendarEvent also has an id, which is scoped to the JMAP Account and used for referencing it in JMAP methods. There is no necessary link between the uid property and the CalendarEvent's id. CalendarEvents with the same uid in different Accounts MAY have different ids.

## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [@!RFC2119] [@!RFC8174] when, and only when, they appear in all capitals, as shown here.

Type signatures, examples and property descriptions in this document follow the conventions established in Section 1.1 of [@!RFC8620].

Object properties may also have a set of attributes defined along with the type
signature. These have the following meanings:

* **server-set**: Only the server can set the value for this property. The
  client MUST NOT send this property when creating a new object of this type.
* **immutable**: The value MUST NOT change after the object is created.
* **default**: (This is followed by a JSON value or description). The value
  that will be used for this property if it is omitted in an argument, or when creating a new object of this type.

Data types defined in the core specification are used in this document.

## The LocalDate Data Type

Where `LocalDate` is given as a type, it means a string in the same format as `Date` (see [@!RFC8620], Section 1.4), but with the `time-offset` omitted from the end. The interpretation in absolute time depends upon the time zone for the event, which may not be a fixed offset (for example when daylight saving time occurs). For example, `2014-10-30T14:12:00`.

## Terminology

The same terminology is used in this document as in the core JMAP specification, see [@!RFC8620], Section 1.6.

## Addition to the capabilities object

The capabilities object is returned as part of the JMAP Session object; see [@!RFC8620], Section 2. This document defines three additional capability URIs.

### urn:ietf:params:jmap:calendars

This represents support for the Calendar, and CalendarEvent data types and associated API methods. The value of this property in the JMAP session capabilities property is an empty object.

The value of this property in an account’s accountCapabilities property is an object that MUST contain the following information on server capabilities and permissions for that account:

- **accountIdForSharing**: `String`
  Id of account with `urn:ietf:params:jmap:calendarusers`. May be self.
- **maxSizeCalendarEvent**: `UnsignedInt`
  The maximum size in octets of the largest CalendarEvent the server is willing to store. TODO: How can you relate this to what the client knows?
- **minDateTime**: `LocalDate`
  The earliest date-time the server is willing to accept for any date stored in a CalendarEvent.
- **maxDateTime**: `LocalDate`
  The latest date-time the server is willing to accept for any date stored in a CalendarEvent.
- **maxParticipantsPerEvent**: `Number|null`
  The maximum number of participants a single event may have.
- **mayCreateCalendar**: `Boolean`
  The user may create a calendar in this account.

Only accounts where the user is subscribed to at least one calendar should be returned.

### urn:ietf:params:jmap:calendarusers

Represents support for the CalendarUser object and associated.

Single user systems do not need this and can not support it.

- **maxAvailabilityDuration**:
  The maximum duration over which the server is prepared to calculate availability in a single call.

### urn:ietf:params:jmap:calendarnotifications

This represents support for the CalendarNotification data type and associated API methods.

- **maxNumberNotifications**: `UnsignedInt`
