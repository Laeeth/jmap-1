# Contacts

A **Contact** object stores information about a person or company. It has the following properties:

- **id**: `String` (immutable; server-set)
  The id of the contact.
- **isFlagged**: `Boolean`
  Is the contact flagged (marked as important in some way by the user)?
- **avatar**: `File|null`
  A file containing an image to be used to represent this contact.
- **prefix**: `String`
  The honorific title of the contact, e.g. "Mr", "Ms", "Dr", etc.
- **firstName**: `String`
  The first name(s) of a contact.
- **lastName**: `String`
  The last name of a contact.
- **suffix**: `String`
  The honorific suffix of the contact, e.g. "B.A.", "Esq." etc.
- **nickname**: `String`
  The nickname of the contact.
- **birthday**: `String`
  The person's birth date in the form `"YYYY-MM-DD"` (any part may be all `0`s for unknown).
- **anniversary**: `String`
  The person's anniversary date in the form `"YYYY-MM-DD"` (any part may be all `0`s for unknown).
- **company**: `String`
  The company for which the person works.
- **department**: `String`
  The department within the company for which the person works.
- **jobTitle**: `String`
  The job title of the person.
- **emails**: `ContactInformation[]`
  An array of ContactInformation objects where the values are email addresses. Types are:
  - `"personal"` The address is for emailing the person in a personal context.
  - `"work"` The address is for emailing the person in a professional context.
  - `"other"` The address is for some other purpose. A *label* property MAY be included to display next to the address to help the user identify its purpose.
- **phones**: `ContactInformation[]`
  An array of ContactInformation objects where the values are phone numbers. Types are:
  - `"home"` The number is for contacting the person at their residence.
  - `"work"` The number is for contacting the person at their workplace.
  - `"mobile"` The number is for contacting the person regardless of location.
  - `"fax"` The number is for sending faxes to the contact.
  - `"pager"` The number is for a pager or beeper associated with the contact.
  - `"other"` The number is for some other purpose. A *label* property MAY be included to display next to the number to help the user identify its purpose.
- **online**: `ContactInformation[]`
  An array of ContactInformation objects where the values are URIs or usernames associated with the person for online services.
  Types are:
  - `"uri"` The value is a URI, e.g. a website link.
  - `"username"` The value is a username associated with the person (e.g. for Twitter, or Facebook, or an IM client). A *label* property SHOULD be included to identify what service this is for. For compatibility between clients, this label SHOULD be the canonical service name, including capitalisation. e.g. `"Twitter"`, `"Facebook"`, `"Skype"`, `"GitHub"`, `"XMPP"`.
  - `"other"` The value is something else not covered by the above categories. A *label* property MAY be included to display next to the number to help the user identify its purpose.
- **addresses**: `Address[]`
  An array of Address objects, containing physical locations associated with the person.
  Types are:
  - `"home"` An address of a residence associated with the person.
  - `"work"` An address of a workplace associated with the person.
  - `"billing"` An address to be used with billing associated with the person.
  - `"postal"` An address to be used for delivering physical items to the person.
  - `"other"` An address not covered by the above categories.
- **notes**: `String`
  Arbitrary notes about the contact.

Note, none of these properties have a `null`able type. If the specific information is not known for a contact, the empty string or empty array should be used as appropriate, or in the case of birthday the string `"0000-00-00"`.

A **ContactInformation** object has the following properties:

- **type**: `String`
  Specifies the context of the contact information. This MUST be taken from the set of values allowed depending on whether this is part of the *phones*, *emails* or *online* property (see above).
- **label**: `String|null`
  A label describing the value in more detail, especially if `type === "other"` (but MAY be included with any type).
- **value**: `String`
  The actual contact information, e.g. the email address or phone number.
- **isDefault**: `Boolean`
  Whether this contact is the default for its type (SHOULD only be one per type, but some backends will allow multiple defaults)

An **Address** object has the following properties:

- **type**: `String`
  Specifies the context of the address information. This MUST be taken from the set of values allowed (see above).
- **label**: `String|null`
  A label describing the value in more detail, especially if `type === "other"` (but MAY be included with any type).
- **street**: `String`
  The street address. This MAY be multiple lines; newlines MUST be preserved.
- **locality**: `String`
  The city, town, village, post town, or other locality within which the street address may be found.
- **region**: `String`
  The province, such as a state, county, or canton within which the locality may be found.
- **postcode**: `String`
  The postal code, post code, ZIP code or other short code associated with the address by the relevant country's postal system.
- **country**: `String`
  The country name.
- **isDefault**: `Boolean`
  Whether this contact is the default for its type (SHOULD only be one per type, but some backends will allow multiple defaults)

A **File** Object has the following properties:

- **blobId**: `String`
  The id of the binary data.
- **type**: `String|null`
  The content-type of the file, if known.
- **name**: `String|null`
  The full file name, if known. e.g. "myface.png"
- **size**: `Number|null`
  The size, in bytes, of the file when fully decoded (i.e. the number of bytes in the file the user would download), if known.

## Contact/get

Standard */get* method. The *ids* argument may be `null` to fetch all at once.

## Contact/changes

Standard */changes* method.

## Contact/query

Standard */query* method.

### Filtering

A **FilterOperator** object has the following properties:

- **operator**: `String`
  This MUST be one of the following strings: "AND"/"OR"/"NOT":
  - **AND**: all of the conditions must match for the filter to match.
  - **OR**: at least one of the conditions must match for the filter to match.
  - **NOT**: none of the conditions must match for the filter to match.
- **conditions**: `(FilterCondition|FilterOperator)[]`
  The conditions to evaluate against each contact.

A **FilterCondition** object has the following properties:

- **inContactGroup**: `String[]|null`
  A list of contact group ids. A contact must be in ANY of these groups to match the condition.
- **isFlagged**: `Boolean|null`
  The `isFlagged` property of the contact must be identical to the value given to match the condition.
- **text**: `String|null`
  Equivalent to ORing together a FilterCondition for each of the `String` typed conditions (prefix, firstName, etc.).
- **prefix**: `String`
  Looks for the text in the *prefix* property of the contact.
- **firstName**: `String`
  Looks for the text in the *firstName* property of the contact.
- **lastName**: `String`
  Looks for the text in the *lastName* property of the contact.
- **suffix**: `String`
  Looks for the text in the *suffix* property of the contact.
- **nickname**: `String`
  Looks for the text in the *nickname* property of the contact.
- **company**: `String`
  Looks for the text in the *company* property of the contact.
- **department**: `String`
  Looks for the text in the *department* property of the contact.
- **jobTitle**: `String`
  Looks for the text in the *jobTitle* property of the contact.
- **email**: `String`
  Looks for the text in the *value* property of any object in the *emails*
  property of the contact.
- **phone**: `String`
  Looks for the text in the *value* property of any object in the *phones*
  property of the contact.
- **online**: `String`
  Looks for the text in the *value* property of any object in the *online*
  property of the contact.
- **address**: `String`
  Looks for the text in the *street*, *locality*, *region*, *postcode* or *country* property of any object in the *addresses* property of the contact.
- **notes**: `String`
  Looks for the text in the *notes* property of the contact.

If zero properties are specified on the FilterCondition, the condition MUST always evaluate to `true`. If multiple properties are specified, ALL must apply for the condition to be `true` (it is equivalent to splitting the object into one-property conditions and making them all the child of an AND filter operator).

The exact semantics for matching `String` fields is **deliberately not defined** to allow for flexibility in indexing implementation, subject to the following:

- Text SHOULD be matched in a case-insensitive manner.
- Text contained in either (but matched) single or double quotes SHOULD be treated as a **phrase search**, that is a match is required for that exact sequence of words, excluding the surrounding quotation marks. Use `\"`, `\'` and `\\` to match a literal `"`, `'` and `\` respectively in a phrase.
- Outside of a phrase, white-space SHOULD be treated as dividing separate tokens that may be searched for separately in the contact, but MUST all be present for the contact to match the filter.
- Tokens MAY be matched on a whole-word basis using stemming (so for example a text search for `bus` would match "buses" but not "business").

### Sorting

The following properties MUST be supported for sorting:

- isFlagged
- firstName
- lastName
- nickname
- company

## Contact/queryChanges

Standard */queryChanges* method.

## Contact/set

Standard */set* method.

To set a new avatar, the file must first be uploaded using the standard upload mechanism (see the File Uploads section of this spec). This will give the client a valid blobId/size/type to use. The server SHOULD reject attempts to set a file that is not a recognised image type as the avatar for a contact.
